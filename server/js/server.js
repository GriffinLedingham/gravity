// Generated by CoffeeScript 1.6.3
var Client, Room, clients, guid, player1, player2, printRooms, rooms, s4, ws, wss,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

player1 = null;

player2 = null;

clients = [];

rooms = [];

s4 = function() {
  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
};

guid = function() {
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
};

Client = (function() {
  function Client(socket) {
    this.socket = socket;
    this.onMessage = __bind(this.onMessage, this);
    this.closeSocket = __bind(this.closeSocket, this);
    this.guid = guid();
    this.socket.on('message', this.onMessage);
    this.socket.on('close', this.closeSocket);
    this.room = null;
  }

  Client.prototype.closeSocket = function() {
    clients.splice(clients.indexOf(this), 1);
    if ((this.room.player1 != null) && this.room.player1.guid === this.guid) {
      this.room.player1 = null;
      this.room.full = false;
    } else if ((this.room.player2 != null) && this.room.player2.guid === this.guid) {
      this.room.player2 = null;
      this.room.full = false;
    }
    return printRooms();
  };

  Client.prototype.onMessage = function(d) {
    var jsonObj;
    console.log(d);
    jsonObj = JSON.parse(d);
    if (jsonObj.type === 'fire') {
      if ((this.room.player1 != null) && this.room.player1.guid !== this.guid) {
        return this.room.player1.socket.send(JSON.stringify({
          type: 'fire',
          force_x: jsonObj.force_x,
          force_y: jsonObj.force_y,
          angle: jsonObj.angle,
          pos_x: jsonObj.pos_x,
          pos_y: jsonObj.pos_y
        }));
      } else if ((this.room.player2 != null) && this.room.player2.guid !== this.guid) {
        return this.room.player2.socket.send(JSON.stringify({
          type: 'fire',
          force_x: jsonObj.force_x,
          force_y: jsonObj.force_y,
          angle: jsonObj.angle,
          pos_x: jsonObj.pos_x,
          pos_y: jsonObj.pos_y
        }));
      }
    } else if (jsonObj.type === 'end') {
      return console.log('end');
    }
  };

  return Client;

})();

Room = (function() {
  function Room() {
    this.addPlayer = __bind(this.addPlayer, this);
    this.player1 = null;
    this.player2 = null;
    this.full = false;
  }

  Room.prototype.addPlayer = function(client) {
    if (this.player1 == null) {
      return this.player1 = client;
    } else if (this.player2 == null) {
      this.player2 = client;
      return this.full = true;
    }
  };

  return Room;

})();

ws = require('ws').Server;

wss = new ws({
  port: 8142
});

wss.on('connection', function(socket) {
  var client, foundRoom, i, room, _i, _ref;
  console.log("gjhgjhgjhgjgjgjgj");
  client = new Client(socket);
  clients.push(client);
  socket.send(JSON.stringify({
    type: 'fire',
    force_x: 10,
    force_y: 10,
    angle: 10,
    pos_x: 10,
    pos_y: 10
  }));
  if (rooms.length === 0) {
    room = new Room;
    room.addPlayer(client);
    rooms.push(room);
    client.room = room;
  } else {
    foundRoom = false;
    for (i = _i = 0, _ref = rooms.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (!rooms[i].full) {
        rooms[i].addPlayer(client);
        client.room = rooms[i];
        foundRoom = true;
        break;
      }
    }
    if (!foundRoom) {
      room = new Room;
      room.addPlayer(client);
      rooms.push(room);
      client.room = rooms[i];
    }
  }
  return printRooms();
});

printRooms = function() {
  var i, _i, _ref, _results;
  console.log('\n\n\n');
  console.log('Rooms: ');
  _results = [];
  for (i = _i = 0, _ref = rooms.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    console.log('======Room ' + i + '=========');
    if ((rooms[i].player1 != null)) {
      console.log('| Player1: ' + rooms[i].player1.guid);
    } else {
      console.log('| Player1: empty');
    }
    if ((rooms[i].player2 != null)) {
      console.log('| Player2: ' + rooms[i].player2.guid);
    } else {
      console.log('| Player2: empty');
    }
    _results.push(console.log('==============='));
  }
  return _results;
};
